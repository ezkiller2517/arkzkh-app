/**
 * @file Firestore Security Rules for AlignmentOS
 * @version Prototyping
 *
 * @description This ruleset enforces a strict ownership model for user data and organizations.
 *   It leverages path-based authorization for user-specific data and denormalization to
 *   avoid costly `get()` operations for access control. Data shape validation is relaxed to
 *   allow for rapid prototyping and iteration.
 *
 * @dataStructure
 *   - /organizations/{organizationId}: Stores organization profiles.
 *   - /users/{userId}: Stores user profiles.
 *   - /organizations/{organizationId}/strategicBlueprints/{strategicBlueprintId}: Strategic blueprints for each organization.
 *   - /organizations/{organizationId}/contentObjects/{contentObjectId}: Content objects, associated with strategic blueprints.
 *   - /organizations/{organizationId}/contentObjects/{contentObjectId}/alignmentScores/{alignmentScoreId}: Alignment scores for content objects.
 *   - /organizations/{organizationId}/contentObjects/{contentObjectId}/approvalWorkflows/{approvalWorkflowId}: Approval workflows for content objects.
 *   - /organizations/{organizationId}/contentObjects/{contentObjectId}/calendarEvents/{calendarEventId}: Calendar events associated with content objects.
 *   - /organizations/{organizationId}/auditLogs/{auditLogId}: Audit logs.
 *   - /users/{userId}/drafts/{draftId}: Draft content objects for each user.
 *
 * @keySecurityDecisions
 *   - User listing is disallowed.
 *   - All write operations require authentication.
 *   - Ownership is validated on create and enforced immutably on update.
 *   - Data shape validation is minimal, focusing only on fields crucial for authorization.
 *   - get() is avoided.
 *
 * @denormalizationForAuthorization
 *   - organizationId is included in StrategicBlueprint, ContentObject, AlignmentScore, ApprovalWorkflow, CalendarEvent, and AuditLog to allow direct access control without needing to traverse the hierarchy.
 *   - ownerId is included in ContentObject to allow direct verification of ownership.
 *
 * @structuralSegregation
 *   - Draft content objects are stored in a private subcollection (/users/{userId}/drafts/{draftId}) to ensure that only the owning user can access them.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read and create access to organization documents.
     *   Organizations can be created by any authenticated user.
     * @path /organizations/{organizationId}
     * @allow (create) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' can create organization '0Jb9YGskjhuaYdWkQdwI'.
     * @deny (update) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' cannot update organization 'differentOrgId' if not the creator.
     * @principle Allows any signed-in user to create an organization.
     */
    match /organizations/{organizationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add creator validation once the schema is updated with creator field.
    }

    /**
     * @description Allows owner to read and write their own user document. Disallows listing all users.
     * @path /users/{userId}
     * @allow (create) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' can create their own user document.
     * @deny (update) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' cannot update another user's document.
     * @principle Enforces user-ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows owner to read and write their strategic blueprints under an organization.
     * @path /organizations/{organizationId}/strategicBlueprints/{strategicBlueprintId}
     * @allow (create) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' can create strategic blueprint under organization '0Jb9YGskjhuaYdWkQdwI'.
     * @deny (update) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' cannot update strategic blueprint under organization 'differentOrgId' if not the owner.
     * @principle Enforces user-ownership within an organization.
     */
    match /organizations/{organizationId}/strategicBlueprints/{strategicBlueprintId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.organizationId == organizationId;
      allow update: if isSignedIn() && request.resource.data.organizationId == organizationId;
      allow delete: if isSignedIn() && request.resource.data.organizationId == organizationId;
    }

    /**
     * @description Allows owner to read and write their content objects under an organization.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}
     * @allow (create) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' can create content object under organization '0Jb9YGskjhuaYdWkQdwI'.
     * @deny (update) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' cannot update content object under organization 'differentOrgId' if not the owner.
     * @principle Enforces user-ownership within an organization.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.organizationId == organizationId && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.organizationId == organizationId && request.resource.data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.organizationId == organizationId && request.resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Allows owner to read and write their alignment scores under a content object.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}/alignmentScores/{alignmentScoreId}
     * @allow (create) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' can create alignment score under content object 'contentObjectId'.
     * @deny (update) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' cannot update alignment score under content object 'contentObjectId' if not the owner.
     * @principle Enforces user-ownership within a content object.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId}/alignmentScores/{alignmentScoreId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/organizations/$(organizationId)/contentObjects/$(contentObjectId)).data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/organizations/$(organizationId)/contentObjects/$(contentObjectId)).data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/organizations/$(organizationId)/contentObjects/$(contentObjectId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Allows owner to read and write their approval workflows under a content object.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}/approvalWorkflows/{approvalWorkflowId}
     * @allow (create) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' can create approval workflow under content object 'contentObjectId'.
     * @deny (update) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' cannot update approval workflow under content object 'contentObjectId' if not the owner.
     * @principle Enforces user-ownership within a content object.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId}/approvalWorkflows/{approvalWorkflowId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/organizations/$(organizationId)/contentObjects/$(contentObjectId)).data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/organizations/$(organizationId)/contentObjects/$(contentObjectId)).data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/organizations/$(organizationId)/contentObjects/$(contentObjectId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Allows owner to read and write their calendar events under a content object.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}/calendarEvents/{calendarEventId}
     * @allow (create) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' can create calendar event under content object 'contentObjectId'.
     * @deny (update) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' cannot update calendar event under content object 'contentObjectId' if not the owner.
     * @principle Enforces user-ownership within a content object.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId}/calendarEvents/{calendarEventId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/organizations/$(organizationId)/contentObjects/$(contentObjectId)).data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/organizations/$(organizationId)/contentObjects/$(contentObjectId)).data.ownerId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/organizations/$(organizationId)/contentObjects/$(contentObjectId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description Allows owner to read and write their audit logs under an organization.
     * @path /organizations/{organizationId}/auditLogs/{auditLogId}
     * @allow (create) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' can create audit log under organization '0Jb9YGskjhuaYdWkQdwI'.
     * @deny (update) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' cannot update audit log under organization 'differentOrgId' if not the owner.
     * @principle Enforces user-ownership within an organization.
     */
    match /organizations/{organizationId}/auditLogs/{auditLogId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with creator field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with creator field.
    }

    /**
     * @description Allows owner to read and write their draft content objects.
     * @path /users/{userId}/drafts/{draftId}
     * @allow (create) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' can create their own draft content object.
     * @deny (update) User with UID 'nEw3mvQ9xyg4owGM7m1ENN46Lfm2' cannot update another user's draft content object.
     * @principle Enforces user-ownership for drafts.
     */
    match /users/{userId}/drafts/{draftId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of the resource and the resource exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}