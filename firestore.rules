/**
 * @fileoverview Firestore Security Rules for AlignmentOS.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data (drafts) and an organization-centric model for shared resources like strategic blueprints, content objects, and related entities.
 *
 * Data Structure:
 * - /organizations/{organizationId}: Root collection for organizations.
 * - /users/{userId}: Collection for user profiles.
 * - /organizations/{organizationId}/strategicBlueprints/{strategicBlueprintId}: Strategic blueprints for each organization.
 * - /organizations/{organizationId}/contentObjects/{contentObjectId}: Content objects within an organization.
 * - /organizations/{organizationId}/contentObjects/{contentObjectId}/alignmentScores/{alignmentScoreId}: Alignment scores for content objects.
 * - /organizations/{organizationId}/contentObjects/{contentObjectId}/approvalWorkflows/{approvalWorkflowId}: Approval workflows for content objects.
 * - /organizations/{organizationId}/contentObjects/{contentObjectId}/calendarEvents/{calendarEventId}: Calendar events for content objects.
 * - /organizations/{organizationId}/auditLogs/{auditLogId}: Audit logs for organizations.
 * - /users/{userId}/drafts/{draftId}: Draft content objects for individual users.
 *
 * Key Security Decisions:
 * - Users can only create/modify/delete their own profiles and drafts.
 * - All content objects and related data are scoped to an organization and are governed by organization-level rules.  These rules currently only enforce that the organizationId on the document matches the path parameter.
 * - Listing users is not allowed.
 *
 * Denormalization for Authorization:
 * - The `organizationId` is denormalized into most entities to enable independent authorization checks at each level without requiring hierarchical traversal.
 * - The `ownerId` is denormalized into `ContentObject` documents to avoid `get()` calls when verifying ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading organization profiles, but only creation.
     * @path /organizations/{organizationId}
     * @allow (get, list): if true;
     * @allow (create): if isValidOrgCreateRequest();
     * @deny (update, delete): Always.
     * @principle Organization data should only be created (not updated or deleted).
     */
    match /organizations/{organizationId} {
      allow get, list: if true;
      allow create: if isValidOrgCreateRequest(organizationId);
      allow update: if false;
      allow delete: if false;

      function isValidOrgCreateRequest(organizationId) {
        return request.resource.data.id == organizationId;
      }
    }

    /**
     * @description Manages user profiles. Users can only read/write their own profiles.
     * @path /users/{userId}
     * @allow (get): if isOwner(userId);
     * @allow (create): if isSelfCreate(userId);
     * @allow (update, delete): if isExistingOwner(userId);
     * @deny (list): Always.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSelfCreate(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages strategic blueprints within an organization.
     * @path /organizations/{organizationId}/strategicBlueprints/{strategicBlueprintId}
     * @allow (get, list): if true;
     * @allow (create): if request.resource.data.organizationId == organizationId;
     * @allow (update, delete): if resource.data.organizationId == organizationId && resource != null;
     * @principle Enforces organization-level scoping for strategic blueprints.
     */
    match /organizations/{organizationId}/strategicBlueprints/{strategicBlueprintId} {
      allow get, list: if true;
      allow create: if isValidStrategicBlueprintCreateRequest(organizationId);
      allow update: if isExistingOrgDocument(organizationId);
      allow delete: if isExistingOrgDocument(organizationId);

      function isValidStrategicBlueprintCreateRequest(organizationId) {
        return request.resource.data.organizationId == organizationId;
      }
    }

    /**
     * @description Manages content objects within an organization.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}
     * @allow (get, list): if true;
     * @allow (create): if isValidContentObjectCreateRequest(organizationId);
     * @allow (update, delete): if isExistingOrgDocument(organizationId);
     * @principle Enforces organization-level scoping for content objects and requires a valid owner.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId} {
      allow get, list: if true;
      allow create: if isValidContentObjectCreateRequest(organizationId);
      allow update: if isExistingOrgDocument(organizationId);
      allow delete: if isExistingOrgDocument(organizationId);

      function isValidContentObjectCreateRequest(organizationId) {
          return request.resource.data.organizationId == organizationId;
      }
    }

    /**
     * @description Manages alignment scores for content objects.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}/alignmentScores/{alignmentScoreId}
     * @allow (get, list): if true;
     * @allow (create): if isOrgPath(organizationId);
     * @allow (update, delete): if isExistingOrgDocument(organizationId);
     * @principle Enforces organization-level scoping for alignment scores.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId}/alignmentScores/{alignmentScoreId} {
      allow get, list: if true;
      allow create: if isValidAlignmentScoreCreateRequest(organizationId, contentObjectId);
      allow update: if isExistingOrgDocument(organizationId);
      allow delete: if isExistingOrgDocument(organizationId);

        function isValidAlignmentScoreCreateRequest(organizationId, contentObjectId) {
          return get(/databases/$(database)/documents/organizations/$(organizationId)/contentObjects/$(contentObjectId)).data.organizationId == organizationId;
        }
    }

    /**
     * @description Manages approval workflows for content objects.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}/approvalWorkflows/{approvalWorkflowId}
     * @allow (get, list): if true;
     * @allow (create): if isOrgPath(organizationId);
     * @allow (update, delete): if isExistingOrgDocument(organizationId);
     * @principle Enforces organization-level scoping for approval workflows.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId}/approvalWorkflows/{approvalWorkflowId} {
      allow get, list: if true;
      allow create: if isValidApprovalWorkflowCreateRequest(organizationId, contentObjectId);
      allow update: if isExistingOrgDocument(organizationId);
      allow delete: if isExistingOrgDocument(organizationId);

      function isValidApprovalWorkflowCreateRequest(organizationId, contentObjectId) {
          return get(/databases/$(database)/documents/organizations/$(organizationId)/contentObjects/$(contentObjectId)).data.organizationId == organizationId;
      }
    }

    /**
     * @description Manages calendar events for content objects.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}/calendarEvents/{calendarEventId}
     * @allow (get, list): if true;
     * @allow (create): if isOrgPath(organizationId);
     * @allow (update, delete): if isExistingOrgDocument(organizationId);
     * @principle Enforces organization-level scoping for calendar events.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId}/calendarEvents/{calendarEventId} {
      allow get, list: if true;
      allow create: if isValidCalendarEventCreateRequest(organizationId, contentObjectId);
      allow update: if isExistingOrgDocument(organizationId);
      allow delete: if isExistingOrgDocument(organizationId);

        function isValidCalendarEventCreateRequest(organizationId, contentObjectId) {
            return get(/databases/$(database)/documents/organizations/$(organizationId)/contentObjects/$(contentObjectId)).data.organizationId == organizationId;
        }
    }

    /**
     * @description Manages audit logs within an organization.
     * @path /organizations/{organizationId}/auditLogs/{auditLogId}
     * @allow (get, list): if true;
     * @allow (create): if isOrgPath(organizationId);
     * @allow (update, delete): if isExistingOrgDocument(organizationId);
     * @principle Enforces organization-level scoping for audit logs.
     */
    match /organizations/{organizationId}/auditLogs/{auditLogId} {
      allow get, list: if true;
      allow create: if isValidAuditLogCreateRequest(organizationId);
      allow update: if isExistingOrgDocument(organizationId);
      allow delete: if isExistingOrgDocument(organizationId);

      function isValidAuditLogCreateRequest(organizationId) {
        return request.resource.data.organizationId == organizationId;
      }
    }

    /**
     * @description Manages draft content objects for each user.
     * @path /users/{userId}/drafts/{draftId}
     * @allow (get, list): if isOwner(userId);
     * @allow (create): if request.resource.data.ownerId == userId;
     * @allow (update, delete): if isExistingOwner(userId);
     * @principle Enforces user-ownership for draft content objects.
     */
    match /users/{userId}/drafts/{draftId} {
      allow get, list: if isOwner(userId);
      allow create: if isValidDraftCreateRequest(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

        function isValidDraftCreateRequest(userId) {
          return request.resource.data.ownerId == userId;
        }
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is creating their own user document.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is creating their own document, false otherwise.
     */
    function isSelfCreate(userId) {
        return isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     *              It verifies both ownership and document existence.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.ownerId == userId;
    }

    /**
     * @description Checks if the organization ID in the path matches the one in the resource.
     * @param {string} organizationId The organization ID to compare against.
     * @return {boolean} True if the organization ID matches, false otherwise.
     */
    function isOrgPath(organizationId) {
      return request.resource.data.organizationId == organizationId;
    }

    /**
     * @description Checks if the request is under the correct org path and that the document exists.
     * @param {string} organizationId The organization ID to compare against.
     * @return {boolean} True if the organization ID matches and document exists.
     */
    function isExistingOrgDocument(organizationId) {
        return resource.data.organizationId == organizationId;
    }
  }
}