/**
 * @file Firestore Security Rules for AlignmentOS
 * @version Prototyping
 *
 * @description
 * This ruleset enforces a strict user-ownership model with organization-based data segregation for AlignmentOS.
 *
 * Data Structure:
 * - /organizations/{organizationId}: Root-level collection for organizations.
 * - /users/{userId}: Root-level collection for users.
 * - /organizations/{organizationId}/strategicBlueprints/{strategicBlueprintId}: Strategic blueprints for organizations.
 * - /organizations/{organizationId}/contentObjects/{contentObjectId}: Content objects within an organization.
 * - /organizations/{organizationId}/contentObjects/{contentObjectId}/alignmentScores/{alignmentScoreId}: Alignment scores for content objects.
 * - /organizations/{organizationId}/contentObjects/{contentObjectId}/approvalWorkflows/{approvalWorkflowId}: Approval workflows for content objects.
 * - /organizations/{organizationId}/contentObjects/{contentObjectId}/calendarEvents/{calendarEventId}: Calendar events for content objects.
 * - /organizations/{organizationId}/auditLogs/{auditLogId}: Audit logs for organizations.
 * - /users/{userId}/drafts/{draftId}: Draft content objects specific to each user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Read-only collections are not explicitly defined in this version but can be easily enabled by setting `allow get, list: if true;`
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * - `organizationId` is present on almost every entity to avoid traversing the tree for authorization checks.
 * - `ownerId` is denormalized into the ContentObject to avoid lookups for ownership verification.
 *
 * Structural Segregation:
 * - `drafts` subcollection under `/users/{userId}` ensures that only the user has access to their drafts.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows creating and managing organization profiles.
     * @path /organizations/{organizationId}
     * @allow (create) User with valid auth can create an organization with a matching ID (request.auth.uid == resource.data.id).
     * @deny (create) User tries to create an organization with an ID that does not match their auth UID.
     * @allow (get, list) Any user can read organizations.
     * @deny (update, delete) No one can update or delete an organization.
     * @principle Organization creation requires authentication.
     */
    match /organizations/{organizationId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.id == organizationId;
      allow update, delete: if false;
    }

    /**
     * @description Allows reading and managing user profiles.
     * @path /users/{userId}
     * @allow (create) User with valid auth can create their own profile (request.auth.uid == userId).
     * @deny (create) User tries to create a profile for another user.
     * @allow (get, list) Any user can read user profiles.
     * @deny (update, delete) No one can update or delete user profiles.
     * @principle User profiles are owner-writeable on creation only.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if false;
    }

    /**
     * @description Allows managing strategic blueprints for an organization.
     * @path /organizations/{organizationId}/strategicBlueprints/{strategicBlueprintId}
     * @allow (create) User with valid auth can create a strategic blueprint within their organization.
     * @deny (create) User tries to create a strategic blueprint in another organization.
     * @allow (get, list) Any user can read strategic blueprints.
     * @deny (update, delete) No one can update or delete strategic blueprints.
     * @principle Strategic blueprints are organization-owned.
     */
    match /organizations/{organizationId}/strategicBlueprints/{strategicBlueprintId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    /**
     * @description Allows managing content objects within an organization.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}
     * @allow (create) User with valid auth can create a content object within their organization.
     * @deny (create) User tries to create a content object in another organization.
     * @allow (get, list) Any user can read content objects.
     * @deny (update, delete) No one can update or delete content objects.
     * @principle Content objects are organization-owned.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    /**
     * @description Allows managing alignment scores for content objects.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}/alignmentScores/{alignmentScoreId}
     * @allow (create) User with valid auth can create an alignment score.
     * @deny (create) User tries to create an alignment score without authentication.
     * @allow (get, list) Any user can read alignment scores.
     * @deny (update, delete) No one can update or delete alignment scores.
     * @principle Alignment scores are publicly readable, but only authenticated users can create them.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId}/alignmentScores/{alignmentScoreId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    /**
     * @description Allows managing approval workflows for content objects.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}/approvalWorkflows/{approvalWorkflowId}
     * @allow (create) User with valid auth can create an approval workflow.
     * @deny (create) User tries to create an approval workflow without authentication.
     * @allow (get, list) Any user can read approval workflows.
     * @deny (update, delete) No one can update or delete approval workflows.
     * @principle Approval workflows are publicly readable, but only authenticated users can create them.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId}/approvalWorkflows/{approvalWorkflowId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    /**
     * @description Allows managing calendar events for content objects.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}/calendarEvents/{calendarEventId}
     * @allow (create) User with valid auth can create a calendar event.
     * @deny (create) User tries to create a calendar event without authentication.
     * @allow (get, list) Any user can read calendar events.
     * @deny (update, delete) No one can update or delete calendar events.
     * @principle Calendar events are publicly readable, but only authenticated users can create them.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId}/calendarEvents/{calendarEventId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    /**
     * @description Allows managing audit logs for an organization.
     * @path /organizations/{organizationId}/auditLogs/{auditLogId}
     * @allow (create) User with valid auth can create an audit log entry.
     * @deny (create) User tries to create an audit log entry without authentication.
     * @allow (get, list) Any user can read audit logs.
     * @deny (update, delete) No one can update or delete audit logs.
     * @principle Audit logs are publicly readable, but only authenticated users can create them.
     */
    match /organizations/{organizationId}/auditLogs/{auditLogId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    /**
     * @description Allows managing draft content objects for a user.
     * @path /users/{userId}/drafts/{draftId}
     * @allow (create) User with valid auth can create a draft for themselves (request.auth.uid == userId).
     * @deny (create) User tries to create a draft for another user.
     * @allow (get, list) User can access their own drafts.
     * @deny (get, list) User tries to access another user's drafts.
     * @deny (update, delete) No one can update or delete drafts.
     * @principle Drafts are private to the user.
     */
    match /users/{userId}/drafts/{draftId} {
      allow get, list: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if false;
    }
  }
}