/**
 * @file Firestore Security Rules for AlignmentOS
 *
 * @core_philosophy This ruleset enforces a strict ownership model for user data and an organization-centric model for shared resources.
 * All user-specific data is nested under `/users/{userId}` and organization data is under `/organizations/{organizationId}`.
 * This provides clear ownership boundaries and simplifies security rules.
 *
 * @data_structure
 * - `/organizations/{organizationId}`: Stores organization profiles.
 * - `/users/{userId}`: Stores user profiles.
 * - `/organizations/{organizationId}/strategicBlueprints/{strategicBlueprintId}`: Stores strategic blueprints for each organization.
 * - `/organizations/{organizationId}/contentObjects/{contentObjectId}`: Stores content objects associated with a strategic blueprint.
 * - `/organizations/{organizationId}/contentObjects/{contentObjectId}/alignmentScores/{alignmentScoreId}`: Stores alignment scores for content objects.
 * - `/organizations/{organizationId}/contentObjects/{contentObjectId}/approvalWorkflows/{approvalWorkflowId}`: Stores approval workflows for content objects.
 * - `/organizations/{organizationId}/contentObjects/{contentObjectId}/calendarEvents/{calendarEventId}`: Stores calendar events associated with content objects.
 * - `/organizations/{organizationId}/auditLogs/{auditLogId}`: Stores audit logs.
 * - `/users/{userId}/drafts/{draftId}`: Stores draft content objects for each user.
 *
 * @key_security_decisions
 * - User listing is disallowed.
 * - Strict owner-only access is enforced for user-specific data.
 * - Organization-level data requires the user to be authenticated.
 * - Data validation is limited to relational integrity and authorization fields to allow for rapid prototyping.
 *
 * @denormalization_for_authorization
 * - `organizationId` is present on almost every entity to avoid traversing up the tree for authorization checks.
 * - `ownerId` is denormalized into the `ContentObject` to avoid lookups for ownership verification.
 *
 * @structural_segregation
 * - Draft content objects are stored in a private subcollection (`/users/{userId}/drafts/{draftId}`) to ensure only the user has access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows creating, reading, updating, and deleting organization documents. Requires the user to be authenticated.
     * @path /organizations/{organizationId}
     * @allow (create) User with valid auth can create an organization document.
     * @deny (create) User without auth cannot create an organization document.
     * @allow (get, list) Any authenticated user can read organization documents.
     * @deny (update, delete) No one can update or delete organization documents.
     * @principle Requires user to be signed in to create an organization, but does not restrict updates or deletes to only the org creator.
     */
    match /organizations/{organizationId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.id == organizationId; // Validate that the ID matches the path
      allow update, delete: if false;
    }

    /**
     * @description Allows creating, reading, updating, and deleting user documents. Enforces ownership for writes.
     * @path /users/{userId}
     * @allow (create) User can create their own user document if the userId in the path matches their auth UID.
     * @deny (create) User cannot create a user document for another user.
     * @allow (get) User can get their own user document.
     * @deny (get) User cannot get another user's document.
     * @allow (list) User cannot list all user documents.
     * @allow (update) User can update their own user document.
     * @deny (update) User cannot update another user's document.
     * @allow (delete) User can delete their own user document.
     * @deny (delete) User cannot delete another user's document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId; // Self-creation: Validate that the ID matches the path
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id; // Validate ownership and enforce immutability of the ID field
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows creating, reading, updating, and deleting strategic blueprints under an organization.
     * @path /organizations/{organizationId}/strategicBlueprints/{strategicBlueprintId}
     * @allow (create) Any authenticated user can create a strategic blueprint under an organization.
     * @deny (create) User without auth cannot create a strategic blueprint document.
     * @allow (get, list) Any authenticated user can read strategic blueprints.
     * @deny (update, delete) No one can update or delete strategic blueprints.
     * @principle Requires user to be signed in to create a strategic blueprint.
     */
    match /organizations/{organizationId}/strategicBlueprints/{strategicBlueprintId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.organizationId == organizationId; // Validate that the org ID matches the path
      allow update, delete: if false;
    }

    /**
     * @description Allows creating, reading, updating, and deleting content objects under an organization.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}
     * @allow (create) Any authenticated user can create a content object under an organization.
     * @deny (create) User without auth cannot create a content object document.
     * @allow (get, list) Any authenticated user can read content objects.
     * @deny (update, delete) No one can update or delete content objects.
     * @principle Requires user to be signed in to create a content object.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.strategicBlueprintId != null; // Validate that the strategicBlueprintId exists.
      allow update, delete: if false;
    }

    /**
     * @description Allows creating, reading, updating, and deleting alignment scores for content objects.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}/alignmentScores/{alignmentScoreId}
     * @allow (create) Any authenticated user can create an alignment score.
     * @deny (create) User without auth cannot create an alignment score document.
     * @allow (get, list) Any authenticated user can read alignment scores.
     * @deny (update, delete) No one can update or delete alignment scores.
     * @principle Requires user to be signed in to create an alignment score.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId}/alignmentScores/{alignmentScoreId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.contentObjectId == contentObjectId; // Validate that the contentObjectId matches the path
      allow update, delete: if false;
    }

    /**
     * @description Allows creating, reading, updating, and deleting approval workflows for content objects.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}/approvalWorkflows/{approvalWorkflowId}
     * @allow (create) Any authenticated user can create an approval workflow.
     * @deny (create) User without auth cannot create an approval workflow document.
     * @allow (get, list) Any authenticated user can read approval workflows.
     * @deny (update, delete) No one can update or delete approval workflows.
     * @principle Requires user to be signed in to create an approval workflow.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId}/approvalWorkflows/{approvalWorkflowId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.contentObjectId == contentObjectId; // Validate that the contentObjectId matches the path
      allow update, delete: if false;
    }

    /**
     * @description Allows creating, reading, updating, and deleting calendar events for content objects.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}/calendarEvents/{calendarEventId}
     * @allow (create) Any authenticated user can create a calendar event.
     * @deny (create) User without auth cannot create a calendar event document.
     * @allow (get, list) Any authenticated user can read calendar events.
     * @deny (update, delete) No one can update or delete calendar events.
     * @principle Requires user to be signed in to create a calendar event.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId}/calendarEvents/{calendarEventId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.contentObjectId == contentObjectId; // Validate that the contentObjectId matches the path
      allow update, delete: if false;
    }

    /**
     * @description Allows creating, reading, updating, and deleting audit logs.
     * @path /organizations/{organizationId}/auditLogs/{auditLogId}
     * @allow (create) Any authenticated user can create an audit log.
     * @deny (create) User without auth cannot create an audit log document.
     * @allow (get, list) Any authenticated user can read audit logs.
     * @deny (update, delete) No one can update or delete audit logs.
     * @principle Requires user to be signed in to create an audit log.
     */
    match /organizations/{organizationId}/auditLogs/{auditLogId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId != null; // Validate that the userId exists.
      allow update, delete: if false;
    }

    /**
     * @description Allows creating, reading, updating, and deleting draft content objects under a user's drafts collection. Enforces ownership.
     * @path /users/{userId}/drafts/{draftId}
     * @allow (create) User can create a draft content object if the userId in the path matches their auth UID.
     * @deny (create) User cannot create a draft content object for another user.
     * @allow (get) User can get their own draft content object.
     * @deny (get) User cannot get another user's draft content object.
     * @allow (list) User can list their own draft content objects.
     * @deny (list) User cannot list another user's draft content objects.
     * @allow (update) User can update their own draft content object.
     * @deny (update) User cannot update another user's draft content object.
     * @allow (delete) User can delete their own draft content object.
     * @deny (delete) User cannot delete another user's draft content object.
     * @principle Enforces document ownership for writes and restricts access to a user's own drafts.
     */
    match /users/{userId}/drafts/{draftId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.ownerId == userId; // Self-creation: Validate that the ownerId matches the path
      allow update: if isExistingOwner(userId) && resource.data.ownerId == request.resource.data.ownerId; // Validate ownership and enforce immutability of the ownerId field
      allow delete: if isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}