/**
 * @file Firestore Security Rules for AlignmentOS
 * @version Prototyping
 *
 * @description This ruleset enforces a strict ownership model for user data and organizations.
 * All data is nested under either /users/{userId} or /organizations/{organizationId}, providing clear ownership boundaries.
 * It is in prototyping mode to allow for rapid iteration on the data shape.
 *
 * Data Structure:
 * - /organizations/{organizationId}: Root collection for organization data.
 * - /users/{userId}: Root collection for user data.
 * - /organizations/{organizationId}/strategicBlueprints/{strategicBlueprintId}: Strategic blueprints for each organization.
 * - /organizations/{organizationId}/contentObjects/{contentObjectId}: Content objects associated with a strategic blueprint.
 * - /organizations/{organizationId}/contentObjects/{contentObjectId}/alignmentScores/{alignmentScoreId}: Alignment scores for content objects.
 * - /organizations/{organizationId}/contentObjects/{contentObjectId}/approvalWorkflows/{approvalWorkflowId}: Approval workflows for content objects.
 * - /organizations/{organizationId}/contentObjects/{contentObjectId}/calendarEvents/{calendarEventId}: Calendar events associated with content objects.
 * - /organizations/{organizationId}/auditLogs/{auditLogId}: Audit logs for each organization.
 * - /users/{userId}/drafts/{draftId}: Draft content objects for each user.
 *
 * Key Security Decisions:
 * - Users can only access their own user document.
 * - Users can only create, update, and delete their own draft content objects.
 * - Organizations can be created by anyone, but this should be restricted in production.
 * - Listing of users is disallowed for privacy.
 * - All other collections require the user to be authenticated.
 *
 * Denormalization for Authorization:
 * - The `organizationId` is present on almost every entity to ensure that access control rules can be applied at any level in the hierarchy without needing to traverse up the tree.
 * - The `ownerId` is denormalized into the `ContentObject` to avoid `get()` lookups to verify user ownership of a content object.
 *
 * Structural Segregation:
 * - Draft content objects are stored in a private user subcollection (`/users/{userId}/drafts/{draftId}`) to ensure that only the user has access to their drafts.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read and write access to organization documents. In a real-world scenario, organization creation should be restricted.
     * @path /organizations/{organizationId}
     * @allow (create) - Any authenticated user can create an organization. This should be restricted in production.
     * @allow (get) - Any user can read organization data.
     * @allow (list) - Any user can list organizations.
     * @allow (update) - No one can update an organization.
     * @allow (delete) - No one can delete an organization.
     * @deny (create) - if false
     * @principle Allows anyone to read organization details; open create is for prototyping only.
     */
    match /organizations/{organizationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows users to read and update their own user document.
     * @path /users/{userId}
     * @allow (get) - The user can read their own profile data.
     * @allow (create) - The user can create their own profile.
     * @allow (update) - The user can update their own profile.
     * @allow (delete) - No one can delete a user.
     * @allow (list) - Listing users is not permitted.
     * @deny (create) - if request.auth.uid != userId
     * @deny (update) - if request.auth.uid != userId || resource == null
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
      allow list: if false;
    }

    /**
     * @description Allows CRUD operations on strategic blueprints within an organization, restricting access to authenticated users.
     * @path /organizations/{organizationId}/strategicBlueprints/{strategicBlueprintId}
     * @allow (get) - Any authenticated user can read a strategic blueprint.
     * @allow (create) - Any authenticated user can create a strategic blueprint.
     * @allow (update) - No one can update a strategic blueprint.
     * @allow (delete) - No one can delete a strategic blueprint.
     * @allow (list) - Any authenticated user can list strategic blueprints for an organization.
     * @deny (create) - if !isSignedIn()
     * @deny (update) - if resource == null
     * @principle Restricts strategic blueprint access to authenticated users.
     */
    match /organizations/{organizationId}/strategicBlueprints/{strategicBlueprintId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows CRUD operations on content objects within an organization, restricting access to authenticated users.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}
     * @allow (get) - Any authenticated user can read a content object.
     * @allow (create) - Any authenticated user can create a content object.
     * @allow (update) - No one can update a content object.
     * @allow (delete) - No one can delete a content object.
     * @allow (list) - Any authenticated user can list content objects for an organization.
     * @deny (create) - if !isSignedIn()
     * @deny (update) - if resource == null
     * @principle Restricts content object access to authenticated users.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows CRUD operations on alignment scores within a content object, restricting access to authenticated users.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}/alignmentScores/{alignmentScoreId}
     * @allow (get) - Any authenticated user can read an alignment score.
     * @allow (create) - Any authenticated user can create an alignment score.
     * @allow (update) - No one can update an alignment score.
     * @allow (delete) - No one can delete an alignment score.
     * @allow (list) - Any authenticated user can list alignment scores for a content object.
     * @deny (create) - if !isSignedIn()
     * @deny (update) - if resource == null
     * @principle Restricts alignment score access to authenticated users.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId}/alignmentScores/{alignmentScoreId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows CRUD operations on approval workflows within a content object, restricting access to authenticated users.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}/approvalWorkflows/{approvalWorkflowId}
     * @allow (get) - Any authenticated user can read an approval workflow.
     * @allow (create) - Any authenticated user can create an approval workflow.
     * @allow (update) - No one can update an approval workflow.
     * @allow (delete) - No one can delete an approval workflow.
     * @allow (list) - Any authenticated user can list approval workflows for a content object.
     * @deny (create) - if !isSignedIn()
     * @deny (update) - if resource == null
     * @principle Restricts approval workflow access to authenticated users.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId}/approvalWorkflows/{approvalWorkflowId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows CRUD operations on calendar events within a content object, restricting access to authenticated users.
     * @path /organizations/{organizationId}/contentObjects/{contentObjectId}/calendarEvents/{calendarEventId}
     * @allow (get) - Any authenticated user can read a calendar event.
     * @allow (create) - Any authenticated user can create a calendar event.
     * @allow (update) - No one can update a calendar event.
     * @allow (delete) - No one can delete a calendar event.
     * @allow (list) - Any authenticated user can list calendar events for a content object.
     * @deny (create) - if !isSignedIn()
     * @deny (update) - if resource == null
     * @principle Restricts calendar event access to authenticated users.
     */
    match /organizations/{organizationId}/contentObjects/{contentObjectId}/calendarEvents/{calendarEventId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows CRUD operations on audit logs within an organization, restricting access to authenticated users.
     * @path /organizations/{organizationId}/auditLogs/{auditLogId}
     * @allow (get) - Any authenticated user can read an audit log.
     * @allow (create) - Any authenticated user can create an audit log.
     * @allow (update) - No one can update an audit log.
     * @allow (delete) - No one can delete an audit log.
     * @allow (list) - Any authenticated user can list audit logs for an organization.
     * @deny (create) - if !isSignedIn()
     * @deny (update) - if resource == null
     * @principle Restricts audit log access to authenticated users.
     */
    match /organizations/{organizationId}/auditLogs/{auditLogId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows a user to create, read, update, and delete their own draft content objects.
     * @path /users/{userId}/drafts/{draftId}
     * @allow (get) - The user can read their own draft content object.
     * @allow (create) - The user can create their own draft content object.
     * @allow (update) - The user can update their own draft content object.
     * @allow (delete) - The user can delete their own draft content object.
     * @allow (list) - The user can list their own draft content objects.
     * @deny (create) - if request.auth.uid != userId
     * @deny (update) - if request.auth.uid != userId || resource == null
     * @principle Enforces user-ownership for draft content objects.
     */
    match /users/{userId}/drafts/{draftId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}